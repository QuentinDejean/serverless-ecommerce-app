service: serverless-ecommerce-app

custom:
  restaurantTableName: restaurants

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters

functions:
  getIndex:
    handler: functions/getIndex.handler
    events:
      - http:
          path: /
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action: execute-api:Invoke
        Resource: arn:aws:execute-api:${self:provider.region}:#{AWS::AccountId}:*/*/GET/restaurants
    environment:
      # TODO: find a way to point to this programmatically
      RESTAURANT_API: https://svymw9tunl.execute-api.ap-southeast-2.amazonaws.com/dev
      REGION: ${self:provider.region}

  getRestaurants:
    handler: functions/getRestaurants.handler
    events:
      - http:
          path: /restaurants/
          method: get
          authorizer: aws_iam
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.restaurantTableName}
    environment:
      restaurantTable: ${self:custom.restaurantTableName}


resources:
  Resources:
    restaurantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.restaurantTableName}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1